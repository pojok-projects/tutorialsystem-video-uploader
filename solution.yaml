AWSTemplateFormatVersion: "2010-09-09"

Description: "Tutorial System - Video Uploader Solution"

Transform: AWS::Serverless-2016-10-31

Parameters:
  pSolutionNaming:
    Type: String

Resources:
  rCommonPolicyForLambdas:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy allowing log stream access, vpc config and xray config
      Path: !Sub "/service/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeVpcEndpoints
            Resource: "*"
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:GetSamplingStatisticSummaries
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:*
            Resource: "*"

  rVideoUploaderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/service/"
      RoleName: !Sub "${pSolutionNaming}-${AWS::Region}-vidu-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref rCommonPolicyForLambdas

  rVideoUploaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pSolutionNaming}-lambda"
      Description: Video Uploader - Lambda
      Runtime: nodejs10.x
      Role: !Sub ${rVideoUploaderLambdaExecutionRole.Arn}
      Code: .webpack
      Handler: lambda.handler
      MemorySize: 256
      Timeout: 900
      TracingConfig:
        Mode: Active

  rApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service/
      RoleName: !Sub "${pSolutionNaming}-api-gateway-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${pSolutionNaming}-api-gateway-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
        - PolicyName: !Sub "${pSolutionNaming}-api-lambda-invoke-lambda-iam-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:*

  rApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${pSolutionNaming}-api-gateway"
      Description: Tutorial System Video Uploader - API Rest Gateway
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  rApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub ${rVideoUploaderLambda.Arn}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRef}/*
        - { ApiGatewayRef: !Ref rApiGateway }

  rApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${rApiGatewayRole.Arn}

  rApiProxyGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref rApiGateway
      ParentId: !Sub ${rApiGateway.RootResourceId}
      PathPart: "{proxy+}"

  rApiProxyAnyHandler:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref rApiProxyGatewayResource
      RestApiId: !Ref rApiGateway
      HttpMethod: ANY
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rVideoUploaderLambda.Arn}/invocations"
      MethodResponses: []

  rApiGatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref rApiGateway
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseTemplates:
        application/json: '{"code": 403,"errors": {"response": "Invalid or unauthorized access"}}'

  rApiGatewayDeploymentHASHDATE:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - rApiProxyAnyHandler
    Description: Tutorial System Video Uploader - Deployment of API Gateway endpoints
    Properties:
      RestApiId: !Ref rApiGateway
      StageName: !Sub "mstrStage"

  rApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: mstr
      RestApiId: !Ref rApiGateway
      DeploymentId: !Ref rApiGatewayDeploymentHASHDATE
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
          LoggingLevel: INFO

Outputs:
  oRestApi:
    Value: !Ref rApiGateway
    Export:
      Name: !Sub "${pSolutionNaming}-rest-api"
